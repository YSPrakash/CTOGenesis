```
python
from troposphere import (
    Base64,
    ec
2,
    GetAtt,
    Join,
    Output,

    Ref,
    Template,
)

template = Template()

# VPC
vpc = template.add_resource(
    ec2.V
PC(
        "VPC",
        CidrBlock="10.0.0.0/16",
        EnableDnsSupport="
true",
        EnableDnsHostnames="true",
    )
)

# Internet Gateway
internet_gateway = template.add_resource(
    ec2.InternetGateway(
        "InternetGateway",
    )

)

# Attach Internet Gateway to VPC
template.add_resource(
    ec2.VPCGatewayAttachment(
        "VPCGatewayAttachment",
        VpcId=Ref(vpc),
        InternetGatewayId
=Ref(internet_gateway),
    )
)

# Public Subnets
public_subnet_1a = template.add_resource(
    ec2.Subnet(
        "PublicSubnet1a",
        VpcId=Ref(vpc),
        CidrBlock="10.
0.0.0/20",
        AvailabilityZone="us-east-1a",
        MapPublicIpOnLaunch="true",
    )
)

public_subnet_1b = template.add_resource(
    ec2.Subnet(
        "PublicSubnet1b
",
        VpcId=Ref(vpc),
        CidrBlock="10.0.16.0/20",
        AvailabilityZone="us-east-1b",
        MapPublicIpOnLaunch="true",
    )
)

# Private Subnets
private_
subnet_1 = template.add_resource(
    ec2.Subnet(
        "PrivateSubnet1",
        VpcId=Ref(vpc),
        CidrBlock="10.0.128.0/20",
        AvailabilityZone="us-east-1a
",
        MapPublicIpOnLaunch="false",
    )
)

private_subnet_2 = template.add_resource(
    ec2.Subnet(
        "PrivateSubnet2",
        VpcId=Ref(vpc),
        CidrBlock="10.0.1
44.0/20",
        AvailabilityZone="us-east-1b",
        MapPublicIpOnLaunch="false",
    )
)

private_subnet_3 = template.add_resource(
    ec2.Subnet(
        "PrivateSubnet3",
        
VpcId=Ref(vpc),
        CidrBlock="10.0.160.0/20",
        AvailabilityZone="us-east-1a",
        MapPublicIpOnLaunch="false",
    )
)

private_subnet_4 = template.add
_resource(
    ec2.Subnet(
        "PrivateSubnet4",
        VpcId=Ref(vpc),
        CidrBlock="10.0.176.0/20",
        AvailabilityZone="us-east-1b",
        MapPublicIpOn
Launch="false",
    )
)

# Route Tables
public_route_table_1a = template.add_resource(
    ec2.RouteTable(
        "PublicRouteTable1a",
        VpcId=Ref(vpc),
    )
)

public_route
_table_1b = template.add_resource(
    ec2.RouteTable(
        "PublicRouteTable1b",
        VpcId=Ref(vpc),
    )
)

private_route_table_1 = template.add_resource(
    ec2.Route
Table(
        "PrivateRouteTable1",
        VpcId=Ref(vpc),
    )
)

private_route_table_2 = template.add_resource(
    ec2.RouteTable(
        "PrivateRouteTable2",
        VpcId=Ref(vpc),
    
)
)

private_route_table_3 = template.add_resource(
    ec2.RouteTable(
        "PrivateRouteTable3",
        VpcId=Ref(vpc),
    )
)

private_route_table_4 = template.add_resource(
    
ec2.RouteTable(
        "PrivateRouteTable4",
        VpcId=Ref(vpc),
    )
)

# Associate Route Tables with Subnets
template.add_resource(
    ec2.SubnetRouteTableAssociation(
        "SubnetRouteTableAssociation1a",
        
SubnetId=Ref(public_subnet_1a),
        RouteTableId=Ref(public_route_table_1a),
    )
)

template.add_resource(
    ec2.SubnetRouteTableAssociation(
        "SubnetRouteTableAssociation1b",
        SubnetId
=Ref(public_subnet_1b),
        RouteTableId=Ref(public_route_table_1b),
    )
)

template.add_resource(
    ec2.SubnetRouteTableAssociation(
        "SubnetRouteTableAssociation2",
        SubnetId=Ref(
private_subnet_1),
        RouteTableId=Ref(private_route_table_1),
    )
)

template.add_resource(
    ec2.SubnetRouteTableAssociation(
        "SubnetRouteTableAssociation3",
        SubnetId=Ref(private_subnet_2
),
        RouteTableId=Ref(private_route_table_2),
    )
)

template.add_resource(
    ec2.SubnetRouteTableAssociation(
        "SubnetRouteTableAssociation4",
        SubnetId=Ref(private_subnet_3),
        RouteTableId
=Ref(private_route_table_3),
    )
)

template.add_resource(
    ec2.SubnetRouteTableAssociation(
        "SubnetRouteTableAssociation5",
        SubnetId=Ref(private_subnet_4),
        RouteTableId=Ref(private_
route_table_4),
    )
)

# Route for Internet Gateway
template.add_resource(
    ec2.Route(
        "Route0",
        RouteTableId=Ref(public_route_table_1a),
        DestinationCidrBlock="0.0.
0.0/0",
        GatewayId=Ref(internet_gateway),
    )
)

template.add_resource(
    ec2.Route(
        "Route1",
        RouteTableId=Ref(public_route_table_1b),
        DestinationCidrBlock
="0.0.0.0/0",
        GatewayId=Ref(internet_gateway),
    )
)

# Security Groups
webserver_sg = template.add_resource(
    ec2.SecurityGroup(
        "WebserverSG",
        VpcId=Ref
(vpc),
        GroupDescription="Allow SSH and HTTP traffic",
        SecurityGroupIngress=[
            ec2.SecurityGroupRule(
                IpProtocol="tcp",
                FromPort="22",
                ToPort="22",
                CidrIp="0.0.0.
